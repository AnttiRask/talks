---
title: Improving `sparklyr` testing
format: 
  revealjs:
    smaller: true
    transition: fade
    background-transition: fade
    theme: theme.scss
execute: 
  eval: true
  echo: false
---

## 

<div>

![](images/testthat.png){fig-align="center" width="15%"}

</div>

```{r}
problem1 <- "Problem - Overly complex [***testthat.R***]{.underline}"
problem1_spiel <- ""
```

::: columns
::: {.column width="65%"}
-   Create, track and report test results
-   Used by over 7,000 packages in CRAN
-   Test scripts inside the [***test/testthat/***]{.underline} folder
-   [***testthat.R***]{.underline} file used by R to perform a full package check
:::

::: {.column width="35%"}
### ðŸ“¦

       â”œâ”€â”€ .github/             
         â””â”€â”€ workflows/         
           â””â”€â”€ tests.yml        
       â”œâ”€â”€ codecov.yml           
       â”œâ”€â”€ R
         â””â”€â”€ my-script.R
       â”œâ”€â”€ man/
       â””â”€â”€ tests/
         â”œâ”€â”€ testthat.R.            * 
         â””â”€â”€ testthat/              *
           â”œâ”€â”€ test-my-script.R     * 
           â”œâ”€â”€ helper-init.R        
           â””â”€â”€ setup.R        
:::
:::

## `r problem1`

`r problem1_spiel`

::: columns
::: {.column width="40%"}
#### `dplyr`

``` r
library(testthat)
library(dplyr)

test_check("dplyr")
```
:::

::: {.column width="60%"}
#### `sparklyr`

::: fragment
{{< include testthat.qmd >}}
:::
:::
:::

## `r problem1`

`r problem1_spiel`

::: columns
::: {.column width="40%"}
**What the heck does it do?**

-   Setup Spark environment using options and arguments
-   Custom `testthat` Reporter
-   Filters for which tests to run based on environment
-   Tears down the Spark session after completion
-   Custom test iteration
:::

::: {.column width="60%"}
#### `sparklyr`

{{< include testthat.qmd >}}
:::
:::

## Why is this an problem?

We have to test against multiple versions of Spark, and Spark deployments (Livy). 
`sparklyr` has over 14K lines of code, and over 2K tests.  <br/><br/>

-   Not possible to run tests using `test_check()` , we had to source [***testthat.R***]{.underline} <br/><br/>

-   Not possible to run partial tests, e.g.: `test(filter = "dplyr")` <br/><br/>

-   Very difficult to know the test environment setup (Spark, Livy and Arrow versions)<br/><br/>



## What did we do?

Moved all of the logic to the current `testthat` 

::: columns
::: {.column width="40%"}

:::{.fragment}
-   Setup Spark environment using options and arguments<br/><br/>
-   Custom `testthat` Reporter<br/><br/>
-   Filters for which tests to run based on environment<br/><br/>
-   Tears down the Spark session after completion<br/><br/>
-   Custom test iteration<br/><br/>
:::

:::
::: {.column width="60%"}

:::{.incremental}
- All flags now controlled by Environment Variables only <br/><br/>
- Moved to [***helper-reporter.R***]{.underline} <br/><br/>
- Flagged tests to skip inside the test scripts themselves<br/><br/>
- Moved to [***helper-initialize.R***]{.underline} , and [***setup.R***]{.underline}  <br/><br/><br/>
- **No longer needed! -** Running `test_check()` and `test()` will now work without any customizations.      
:::

:::
:::

## Results

The test environment is properly setup (Spark, Livy, Arrow), and test executed, 
with a single command. 

::: columns
::: {.column width="50%"}

:::{.fragment}
[***testthat.R***]{.underline} today

```{.r code-line-numbers="9-13"}
## To change defaults, change these specific environment variables, before
## running the tests:
## Sys.setenv("SPARK_VERSION" = "2.4.0")
## Sys.setenv("LIVY_VERSION" = "0.6.0")
## Sys.setenv("ARROW_VERSION" = "release") # Or "devel"
## devtools::test(reporter = sparklyr_reporter())
## For Coverage us: Sys.setenv("CODE_COVERAGE" = "true")

if(identical(Sys.getenv("CODE_COVERAGE"), "true")) {
  library(testthat)
  library(sparklyr)
  test_check("sparklyr")
}

```
:::
:::

::: {.column width="50%"}

:::{.fragment}
*Runs all tests using the default Spark version*
```.r
devtools::test()
```
:::

:::{.fragment}
*Runs all tests using the Spark 2.4*
```.r
Sys.setenv("SPARK_VERSION" = "2.4.0")
devtools::test()
```
:::

:::{.fragment}
*Runs only the test scripts that contain "dplyr" in the name*
```.r
devtools::test(filter = "dplyr")
```
:::

:::
:::

## Results

Solution work on console and IDE

:::{.fragment}
![](images/sparklyr-test2.png){.absolute top=100 left=0 width="700"}
:::

:::{.fragment}
![](images/sparklyr-test.png){.absolute top=150 left=450 width="700"}
:::


## Thank you!

