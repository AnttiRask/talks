---
title: Improving `sparklyr` testing
author: Edgar Ruiz
format: 
  revealjs:
    theme: default
    smaller: true
    transition: fade
    background-transition: fade
editor: visual
execute: 
  eval: true
  echo: false
---

## R Package testing ðŸ“¦

```{r}
ver_testthat <- "Provides functions to create, track and report test results"
ver_gh <- "GitHub can run the **exact same** tests when we submit changes to the package"
ver_covr <- "Calculates how many lines of our code was actually tested (coverage)"
ver_main <- "Part of package development discipline. It ensures quality of the package"

ci1 <- "The GitHub Action (CI) actually interacted with an entirely different R script called `.ci.R`"

ci2 <- "It contains additional customizations accessed via script arguments"

title1 <- " R Package testing ðŸ“¦"
problem1 <- "Problem #1 - *testthat.R*"
problem1_spiel <- "The *testthat.R* file is overly complex"
problem2 <- "Problem #2 - *ci/.ci.R*"
problem2_spiel <- ""
```

`r ver_main`

::: columns
::: {.column width="70%"}
-   ![](images/testthat.png){width="50"} `r ver_testthat`
-   ![](images/github-mark.png){width="50"} `r ver_gh`
-   ![](images/covr.png){width="50"} `r ver_covr`
:::

::: {.column width="30%"}
ðŸ“¦

      â”œâ”€â”€ .github/             
        â””â”€â”€ workflows/         
          â””â”€â”€ tests.yml        
      â”œâ”€â”€ codecov.yml           
      â”œâ”€â”€ R
        â””â”€â”€ my-script.R
      â”œâ”€â”€ man/
      â””â”€â”€ tests/
        â”œâ”€â”€ testthat.R.        
        â””â”€â”€ testthat/          
          â”œâ”€â”€ test-my-script.R 
          â”œâ”€â”€ helper-init.R    
          â””â”€â”€ setup.R        
:::
:::

<br/>

:::{.fragment}
---- **Thousands of R packages in CRAN use a combination of these three!!** ----
:::

## ![](images/testthat.png){width="70"} ![](images/covr.png){width="70"} ![](images/devtools.svg){width="70"}

- `testthat` needs the following:

        â””â”€â”€ tests/
          â”œâ”€â”€ testthat.R.         # Activates tests for full package checking    
          â””â”€â”€ testthat/           # Folder with test scripts
            â”œâ”€â”€ test-my-script.R  
            â”œâ”€â”€ helper-init.R    
            â””â”€â”€ setup.R   

- These commands depend on `testthat` being properly setup:

    - `covr::code_coverage()`
    - `test_check()`
    - `devtools::test(filter = "dplyr")` *Runs scripts containing the word "dplyr" only*

## `r problem1`

`r problem1_spiel`

::: columns
::: {.column width="40%"}
#### `dplyr`

``` r
library(testthat)
library(dplyr)

test_check("dplyr")
```
:::

::: {.column width="60%"}
#### `sparklyr`

::: fragment
{{< include testthat.qmd >}}
:::
:::
:::

## `r problem1`

`r problem1_spiel`

::: columns
::: {.column width="40%"}
**What the heck does it do?**

-   Setup some environment options
-   Custom Reporter
-   Filters for which tests
-   Tears down the Spark session after completion
-   Iterates through the tests
:::

::: {.column width="60%"}
#### `sparklyr`

{{< include testthat.qmd >}}
:::
:::

## `r problem2`

`r problem2_spiel`

::: columns
::: {.column width="40%"}
`r ci1`
:::

::: {.column width="60%"}
ðŸ“¦

      â”œâ”€â”€ .github/
      â”œâ”€â”€ ci/          * NOT PART OF NORMAL PATTERN
        â””â”€â”€ .ci.R.     * 
      â”œâ”€â”€ R
      â”œâ”€â”€ man/
      â””â”€â”€ tests/
        â””â”€â”€ testthat/          
:::
:::

## `r problem2`

`r problem2_spiel`

::: columns
::: {.column width="40%"}
`r ci1`
:::

::: {.column width="60%"}
`ci/.ci.R`

``` r
args <- commandArgs(trailingOnly = TRUE)

ensure_pkgs <- function(pkgs) {
  for (pkg in pkgs) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg)
    }
  }
}

if (length(args) == 0) {
  stop("Missing arguments")
} else if (args[[1]] == "--install_pkgs") {
  if (package_version(paste(R.Version()$major, R.Version()$minor, sep = ".")) >= "3.3") {
    ensure_pkgs("sparklyr.nested")
  }
  parent_dir <- dir(".", full.names = TRUE)
  sparklyr_package <- parent_dir[grepl("sparklyr_", parent_dir)]
  install.packages(sparklyr_package, repos = NULL, type = "source")
} else if (args[[1]] == "--testthat") {
  on.exit(setwd(normalizePath("..")))
  setwd("tests")
  source("testthat.R")
} else if (args[[1]] == "--coverage") {
  ensure_pkgs("devtools")

  devtools::install_github("javierluraschi/covr", ref = "feature/no-batch")
  covr::codecov(type = "none", code = "setwd('tests'); source('testthat.R')", batch = FALSE)
} else if (args[[1]] == "--verify-embedded-srcs") {
  ensure_pkgs(c("diffobj", "stringr"))

  sparklyr:::spark_verify_embedded_sources()
} else {
  stop("Unsupported arguments")
}
```
:::
:::

## `r problem2`

`r problem2_spiel`

::: columns
::: {.column width="40%"}
`r ci1`

`r ci2`
:::

::: {.column width="60%"}
`ci/.ci.R`

``` {.r code-line-numbers="20,24,29"}
args <- commandArgs(trailingOnly = TRUE)

ensure_pkgs <- function(pkgs) {
  for (pkg in pkgs) {
    if (!require(pkg, character.only = TRUE)) {
      install.packages(pkg)
    }
  }
}

if (length(args) == 0) {
  stop("Missing arguments")
} else if (args[[1]] == "--install_pkgs") {
  if (package_version(paste(R.Version()$major, R.Version()$minor, sep = ".")) >= "3.3") {
    ensure_pkgs("sparklyr.nested")
  }
  parent_dir <- dir(".", full.names = TRUE)
  sparklyr_package <- parent_dir[grepl("sparklyr_", parent_dir)]
  install.packages(sparklyr_package, repos = NULL, type = "source")
} else if (args[[1]] == "--testthat") {
  on.exit(setwd(normalizePath("..")))
  setwd("tests")
  source("testthat.R")
} else if (args[[1]] == "--coverage") {
  ensure_pkgs("devtools")

  devtools::install_github("javierluraschi/covr", ref = "feature/no-batch")
  covr::codecov(type = "none", code = "setwd('tests'); source('testthat.R')", batch = FALSE)
} else if (args[[1]] == "--verify-embedded-srcs") {
  ensure_pkgs(c("diffobj", "stringr"))

  sparklyr:::spark_verify_embedded_sources()
} else {
  stop("Unsupported arguments")
}
```
:::
:::

## Why is this an issue?

## What did we do?
